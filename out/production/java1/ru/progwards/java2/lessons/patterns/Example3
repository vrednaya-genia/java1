public class GPS {
    public double lat; // широта
    public double lon; // долгота
    public long time;  // время в мс

    public GPS(double lat, double lon, long time) {
        this.lat = lat;
        this.lon = lon;
        this.time = time;
    }
}



public interface Speed {
    public void parse(String name);                // парсинг gps-трекера в xml
    public double distBetween(GPS gps1, GPS gps2); // расстояние между двумя точками в метрах
    public double speed(GPS gps);                  // скорость между двумя точками
    public void track(String name);                // обработка точек
}



import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import java.io.*;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;

// парсит файл *.gpx (xml), выбирая широту, долготу и время
public class SaxParseGpxXml {
    private static ArrayList<GPS> gpspoints = new ArrayList<>();

    public static ArrayList<GPS> parsing(String name) {
        SAXParserFactory factory = SAXParserFactory.newInstance();
        SAXParser parser;
        XMLHandler handler = new XMLHandler();
        try {
            parser = factory.newSAXParser();
            parser.parse(new File(name), handler);
        } catch (ParserConfigurationException | SAXException | IOException e) {
            e.printStackTrace();
        }
        return gpspoints;
    }

    private static class XMLHandler extends DefaultHandler {
        Double lat, lon;
        Long time;
        private String elementName;

        @Override
        public void startElement(String uri, String localName, String qName, Attributes attributes){
            elementName = qName;
            if (qName.equals("trkpt")) {
                lat = Double.parseDouble(attributes.getValue("lat"));
                lon = Double.parseDouble(attributes.getValue("lon"));
            }
        }

        @Override
        public void characters(char[] ch, int start, int length){
            String value = new String(ch, start, length);
            value = value.replace("\n", "").trim();
            DateTimeFormatter format;
            if (!value.isEmpty()) {
                if (elementName.equals("time")) {
                    format = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");
                    ZonedDateTime zdt = ZonedDateTime.of(LocalDateTime.from(format.parse(value)), ZoneId.systemDefault());
                    time = zdt.toEpochSecond();
                }
            }
        }

        @Override
        public void endElement(String uri, String localName, String qName) {
            if (qName.equals("trkpt"))
                gpspoints.add(new GPS(lat, lon, time));
        }
    }
}



import java.util.ArrayList;

public class SpeedGps implements Speed {
    public ArrayList<GPS> gpspoints;
    final static double EARTHRADIUS = 6371000; //радиус земли в метрах
    GPS lastGPS;                               // последняя точка gps

    @Override
    public void parse(String name) {
        gpspoints = SaxParseGpxXml.parsing(name);
    }

    @Override
    public double distBetween(GPS gps1, GPS gps2) {
        double dLat = Math.toRadians(gps2.lat - gps1.lat);
        double dLon = Math.toRadians(gps2.lon - gps1.lon);
        double a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(Math.toRadians(gps1.lat))
                * Math.cos(Math.toRadians(gps2.lat)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return c * EARTHRADIUS;
    }

    @Override
    public double speed (GPS gps) {
        double speedNow = (lastGPS!=null) ? distBetween(lastGPS, gps)/(gps.time-lastGPS.time): 0;
        lastGPS = gps;
        return speedNow;
    }

    public void track (String name) {
        parse(name);
        for (GPS point : gpspoints) {
            double pointSpeed = speed(point);
            System.out.printf("Текущая скорость - %.2f м/с\n", pointSpeed);
        }
    }

    public static void main(String[] args) {
        SpeedGps speedGPS = new SpeedGps();
        speedGPS.track("D:/geoObjects.gpx");
    }
}




import java.util.ArrayDeque;

public class FilterSpeedGps implements Speed {
    private SpeedGps speedGPS;
    double mathExpectation;                  // матожидание
    ArrayDeque<Double> speeds;               // 50 последних скоростей для вычисления 3 сигм
    double sigma;                            // среднеквадратичное отклонение

    FilterSpeedGps(SpeedGps speedGPS) {
        this.speedGPS = speedGPS;
        speeds = new ArrayDeque<>();
    }

    @Override
    public void parse(String name) {
        speedGPS.parse(name);
    }

    @Override
    public double distBetween(GPS gps1, GPS gps2) {
        return speedGPS.distBetween(gps1, gps2);
    }

    @Override
    public double speed(GPS gps) {
        return speedGPS.speed(gps);
    }

    @Override
    public void track(String name) {
        parse(name);
        // первые 50 точек для статистики
        for (int i=0; i<50; i++) {
            double pointSpeed = speed(speedGPS.gpspoints.get(i));
            speeds.offerLast(pointSpeed);
            System.out.printf("Текущая скорость - %.2f м/с\n", pointSpeed);
        }

        calcSigma();

        int mistake = 0;
        for (int i = 50; i<speedGPS.gpspoints.size()-1; i++) {
            double pointSpeed = speed(speedGPS.gpspoints.get(i));
            speeds.pollFirst();
            speeds.offerLast(pointSpeed);
            if ((pointSpeed > mathExpectation - 3*sigma) && (pointSpeed < mathExpectation + 3*sigma)) {
                System.out.printf("Текущая скорость - %.2f м/с\n", pointSpeed);
                if (mistake!=0)
                    mistake = 0;
            } else {
                mistake ++;
                System.out.printf("Выход за пределы 3 сигм - %.2f м/с\n", pointSpeed);
                //если подряд вылетают 9 точек, возможно
                // какое-то серьезное изменение - проводим пересчет статистики
                // условие можно поменять на другое, более обоснованное
                if (mistake > 8) {
                    System.out.println("Пересчет статистики");
                    calcSigma();
                }
            }
        }
    }

    public void calcSigma() {
        ArrayDeque<Double> speedsTemp = new ArrayDeque<>(speeds);
        double sum = 0;
        // мат ожидание
        while (!speedsTemp.isEmpty())
            sum += speedsTemp.pollFirst();
        mathExpectation = sum / 50;
        System.out.printf("Матожидание " + "%.3f" + " м/с\n", mathExpectation);

        // дисперсия
        speedsTemp = new ArrayDeque<>(speeds);
        sum = 0;
        while (!speedsTemp.isEmpty()) {
            double diff = mathExpectation - speedsTemp.pollFirst();
            sum += diff * diff;
        }
        double dispersion = sum / 50;
        System.out.printf("Дисперсия " + "%.3f" + " м/с\n", dispersion);

        // средеквадр отклонение
        sigma = Math.sqrt(dispersion);
        System.out.printf("Отклонение " + "%.3f" + " м/с\n" + "3 сигма " + "%.3f" + " м/с\n", sigma, 3 * sigma);
    }
}



public class Client2 {
    public static void main(String[] args) {
        SpeedGps speedGPS = new SpeedGps();
        FilterSpeedGps filterSpeedGPS = new FilterSpeedGps(speedGPS);
        filterSpeedGPS.track("D:/geoObjects.gpx");
    }
}